
jgaff001_lab4_part5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  000001b8  0000024c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800108  00800108  00000254  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000284  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008dc  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007f7  00000000  00000000  00000bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000033b  00000000  00000000  000013c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  00001704  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000443  00000000  00000000  00001748  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001b8b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 eb       	ldi	r30, 0xB8	; 184
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 30       	cpi	r26, 0x08	; 8
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a8 e0       	ldi	r26, 0x08	; 8
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	aa 30       	cpi	r26, 0x0A	; 10
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	6e d0       	rcall	.+220    	; 0x1a0 <main>
  c4:	77 c0       	rjmp	.+238    	; 0x1b4 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <oof>:



void oof() {
	while(1) {
		if(PINA == correct[temp]) {
  c8:	40 b1       	in	r20, 0x00	; 0
  ca:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
  ce:	28 2f       	mov	r18, r24
  d0:	30 e0       	ldi	r19, 0x00	; 0
  d2:	f9 01       	movw	r30, r18
  d4:	e0 50       	subi	r30, 0x00	; 0
  d6:	ff 4f       	sbci	r31, 0xFF	; 255
  d8:	90 81       	ld	r25, Z
  da:	49 13       	cpse	r20, r25
  dc:	04 c0       	rjmp	.+8      	; 0xe6 <oof+0x1e>
			temp++;
  de:	8f 5f       	subi	r24, 0xFF	; 255
  e0:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
			break;
  e4:	08 95       	ret
		}
		else if (temp != 0 && PINA == correct[temp -1]) {
  e6:	88 23       	and	r24, r24
  e8:	31 f0       	breq	.+12     	; 0xf6 <oof+0x2e>
  ea:	90 b1       	in	r25, 0x00	; 0
  ec:	f9 01       	movw	r30, r18
  ee:	e1 50       	subi	r30, 0x01	; 1
  f0:	ff 4f       	sbci	r31, 0xFF	; 255
  f2:	80 81       	ld	r24, Z
  f4:	98 13       	cpse	r25, r24
			break;
		}
		else {
			temp = 0;
  f6:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
  fa:	08 95       	ret

000000fc <keypad>:
		break;
	}
}

void keypad () {
	switch(state) {
  fc:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <state>
 100:	82 30       	cpi	r24, 0x02	; 2
 102:	99 f0       	breq	.+38     	; 0x12a <keypad+0x2e>
 104:	28 f4       	brcc	.+10     	; 0x110 <keypad+0x14>
 106:	88 23       	and	r24, r24
 108:	41 f0       	breq	.+16     	; 0x11a <keypad+0x1e>
 10a:	81 30       	cpi	r24, 0x01	; 1
 10c:	51 f0       	breq	.+20     	; 0x122 <keypad+0x26>
 10e:	3b c0       	rjmp	.+118    	; 0x186 <keypad+0x8a>
 110:	83 30       	cpi	r24, 0x03	; 3
 112:	e9 f0       	breq	.+58     	; 0x14e <keypad+0x52>
 114:	84 30       	cpi	r24, 0x04	; 4
 116:	f9 f0       	breq	.+62     	; 0x156 <keypad+0x5a>
 118:	36 c0       	rjmp	.+108    	; 0x186 <keypad+0x8a>
		case start:
			state = init;
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <state>
			break;
 120:	35 c0       	rjmp	.+106    	; 0x18c <keypad+0x90>
		case init:
			state = pass;
 122:	82 e0       	ldi	r24, 0x02	; 2
 124:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <state>
			break;
 128:	08 95       	ret
		case pass:
			if(temp ==7) {
 12a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 12e:	87 30       	cpi	r24, 0x07	; 7
 130:	31 f4       	brne	.+12     	; 0x13e <keypad+0x42>
				state = wait;
 132:	83 e0       	ldi	r24, 0x03	; 3
 134:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <state>
				temp = 0;
 138:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
 13c:	29 c0       	rjmp	.+82     	; 0x190 <keypad+0x94>
			}
			else {
				oof();
 13e:	c4 df       	rcall	.-120    	; 0xc8 <oof>
		default:
			state = start;
			break;
		
	}
	switch(state) {
 140:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <state>
 144:	81 30       	cpi	r24, 0x01	; 1
 146:	11 f1       	breq	.+68     	; 0x18c <keypad+0x90>
 148:	83 30       	cpi	r24, 0x03	; 3
 14a:	11 f1       	breq	.+68     	; 0x190 <keypad+0x94>
 14c:	08 95       	ret
			else {
				oof();
			}
			break;
		case wait:
			state = wait2;
 14e:	84 e0       	ldi	r24, 0x04	; 4
 150:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <state>
			break;
 154:	08 95       	ret
		case wait2:
			if (!hashtag && !X && !Y && lock) {
 156:	02 99       	sbic	0x00, 2	; 0
 158:	0a c0       	rjmp	.+20     	; 0x16e <keypad+0x72>
 15a:	00 99       	sbic	0x00, 0	; 0
 15c:	08 c0       	rjmp	.+16     	; 0x16e <keypad+0x72>
 15e:	01 99       	sbic	0x00, 1	; 0
 160:	06 c0       	rjmp	.+12     	; 0x16e <keypad+0x72>
 162:	07 9b       	sbis	0x00, 7	; 0
 164:	04 c0       	rjmp	.+8      	; 0x16e <keypad+0x72>
				state = init;
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <state>
 16c:	0f c0       	rjmp	.+30     	; 0x18c <keypad+0x90>
			}
			else if (hashtag && !X && !Y && !lock) {
 16e:	02 9b       	sbis	0x00, 2	; 0
 170:	16 c0       	rjmp	.+44     	; 0x19e <keypad+0xa2>
 172:	00 99       	sbic	0x00, 0	; 0
 174:	14 c0       	rjmp	.+40     	; 0x19e <keypad+0xa2>
 176:	01 99       	sbic	0x00, 1	; 0
 178:	12 c0       	rjmp	.+36     	; 0x19e <keypad+0xa2>
 17a:	07 99       	sbic	0x00, 7	; 0
 17c:	10 c0       	rjmp	.+32     	; 0x19e <keypad+0xa2>
				state = pass;
 17e:	82 e0       	ldi	r24, 0x02	; 2
 180:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <state>
 184:	08 95       	ret
			else {
				state = wait2;
			}
			break;
		default:
			state = start;
 186:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <state>
			break;
 18a:	08 95       	ret
		
	}
	switch(state) {
		case init:
			PORTB = 0x00;
 18c:	15 b8       	out	0x05, r1	; 5
			break;
 18e:	08 95       	ret
		case pass:
			break;
		case wait:
			if (PORTB == 0) {
 190:	85 b1       	in	r24, 0x05	; 5
 192:	81 11       	cpse	r24, r1
 194:	03 c0       	rjmp	.+6      	; 0x19c <keypad+0xa0>
				PORTB = 1;
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	85 b9       	out	0x05, r24	; 5
 19a:	08 95       	ret
			}
			else {
				PORTB = 0;
 19c:	15 b8       	out	0x05, r1	; 5
 19e:	08 95       	ret

000001a0 <main>:
			break;
	}
}
int main(void)
{
	DDRA = 0x00; PORTA = 0xFF; //inputs
 1a0:	11 b8       	out	0x01, r1	; 1
 1a2:	8f ef       	ldi	r24, 0xFF	; 255
 1a4:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00; //outputs
 1a6:	84 b9       	out	0x04, r24	; 4
 1a8:	15 b8       	out	0x05, r1	; 5
	
	PORTB = 0x00;
 1aa:	15 b8       	out	0x05, r1	; 5
	state = start;
 1ac:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <state>
    while (1) 
    {
		keypad();
 1b0:	a5 df       	rcall	.-182    	; 0xfc <keypad>
 1b2:	fe cf       	rjmp	.-4      	; 0x1b0 <main+0x10>

000001b4 <_exit>:
 1b4:	f8 94       	cli

000001b6 <__stop_program>:
 1b6:	ff cf       	rjmp	.-2      	; 0x1b6 <__stop_program>
