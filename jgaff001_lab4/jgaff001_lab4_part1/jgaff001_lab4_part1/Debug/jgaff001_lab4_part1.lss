
jgaff001_lab4_part1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000013a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000001ae  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001ae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000087e  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007cd  00000000  00000000  00000ac6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002af  00000000  00000000  00001293  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  00001544  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000044f  00000000  00000000  00001578  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000019c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a1 30       	cpi	r26, 0x01	; 1
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	3c d0       	rcall	.+120    	; 0x122 <main>
  aa:	45 c0       	rjmp	.+138    	; 0x136 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <statetransistion>:
enum states {Init, pb0_on,buttonpress_pb1,pb1_on,buttonpress_pb0} state;
	
#define buttonPressed (PINA & 0x01)

void statetransistion () {
	switch(state) {
  ae:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  b2:	82 30       	cpi	r24, 0x02	; 2
  b4:	a9 f0       	breq	.+42     	; 0xe0 <statetransistion+0x32>
  b6:	28 f4       	brcc	.+10     	; 0xc2 <statetransistion+0x14>
  b8:	88 23       	and	r24, r24
  ba:	41 f0       	breq	.+16     	; 0xcc <statetransistion+0x1e>
  bc:	81 30       	cpi	r24, 0x01	; 1
  be:	51 f0       	breq	.+20     	; 0xd4 <statetransistion+0x26>
  c0:	21 c0       	rjmp	.+66     	; 0x104 <statetransistion+0x56>
  c2:	83 30       	cpi	r24, 0x03	; 3
  c4:	99 f0       	breq	.+38     	; 0xec <statetransistion+0x3e>
  c6:	84 30       	cpi	r24, 0x04	; 4
  c8:	b9 f0       	breq	.+46     	; 0xf8 <statetransistion+0x4a>
  ca:	1c c0       	rjmp	.+56     	; 0x104 <statetransistion+0x56>
	case Init:
		state = pb0_on;
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		break;
  d2:	1e c0       	rjmp	.+60     	; 0x110 <statetransistion+0x62>
	case pb0_on:
		if (buttonPressed) {
  d4:	00 9b       	sbis	0x00, 0	; 0
  d6:	1c c0       	rjmp	.+56     	; 0x110 <statetransistion+0x62>
			state = buttonpress_pb1;
  d8:	82 e0       	ldi	r24, 0x02	; 2
  da:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  de:	1b c0       	rjmp	.+54     	; 0x116 <statetransistion+0x68>
		else {
			state = pb0_on;
		}
		break;
	case buttonpress_pb1:
		if (buttonPressed) {
  e0:	00 99       	sbic	0x00, 0	; 0
  e2:	19 c0       	rjmp	.+50     	; 0x116 <statetransistion+0x68>
			state = buttonpress_pb1;
		}
		else {
			state = pb1_on;
  e4:	83 e0       	ldi	r24, 0x03	; 3
  e6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  ea:	18 c0       	rjmp	.+48     	; 0x11c <statetransistion+0x6e>
		}
		break;
	case pb1_on:
		if(buttonPressed) {
  ec:	00 9b       	sbis	0x00, 0	; 0
  ee:	16 c0       	rjmp	.+44     	; 0x11c <statetransistion+0x6e>
			state = buttonpress_pb0;
  f0:	84 e0       	ldi	r24, 0x04	; 4
  f2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  f6:	09 c0       	rjmp	.+18     	; 0x10a <statetransistion+0x5c>
		else {
			state = pb1_on;
		}
		break;
	case buttonpress_pb0:
		if(buttonPressed) {
  f8:	00 99       	sbic	0x00, 0	; 0
  fa:	07 c0       	rjmp	.+14     	; 0x10a <statetransistion+0x5c>
			state = buttonpress_pb0;
		}
		else {
			state = pb0_on;
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 102:	06 c0       	rjmp	.+12     	; 0x110 <statetransistion+0x62>
		}
		break;
	default:
		state = Init;
 104:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			break;
		default:
			break;
		
	}
}
 108:	08 95       	ret
			break;
		case pb1_on:
			PORTB = 0x02;
			break;
		case buttonpress_pb0:
			PORTB = 0x01;
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	85 b9       	out	0x05, r24	; 5
			break;
 10e:	08 95       	ret
		state = Init;
		break;
	}
	switch(state) {
		case pb0_on:
			PORTB = 0x01;
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	85 b9       	out	0x05, r24	; 5
			break;
 114:	08 95       	ret
		case buttonpress_pb1:
			PORTB = 0x02;
 116:	82 e0       	ldi	r24, 0x02	; 2
 118:	85 b9       	out	0x05, r24	; 5
			break;
 11a:	08 95       	ret
		case pb1_on:
			PORTB = 0x02;
 11c:	82 e0       	ldi	r24, 0x02	; 2
 11e:	85 b9       	out	0x05, r24	; 5
 120:	08 95       	ret

00000122 <main>:
	}
}

int main(void)
{
	DDRA = 0x00; PORTA = 0xFF; //inputs
 122:	11 b8       	out	0x01, r1	; 1
 124:	8f ef       	ldi	r24, 0xFF	; 255
 126:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00; //outputs
 128:	84 b9       	out	0x04, r24	; 4
 12a:	15 b8       	out	0x05, r1	; 5
	PORTB = 0x00;
 12c:	15 b8       	out	0x05, r1	; 5
	state = Init;
 12e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	while (1)
	{
		statetransistion();
 132:	bd df       	rcall	.-134    	; 0xae <statetransistion>
 134:	fe cf       	rjmp	.-4      	; 0x132 <main+0x10>

00000136 <_exit>:
 136:	f8 94       	cli

00000138 <__stop_program>:
 138:	ff cf       	rjmp	.-2      	; 0x138 <__stop_program>
